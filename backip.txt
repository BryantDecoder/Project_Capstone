from flask import Flask, request, render_template, redirect, session, abort, jsonify
from flask_sqlalchemy import SQLAlchemy
import bcrypt
from email_validator import validate_email, EmailNotValidError
from datetime import timedelta
from flask_jwt_extended import JWTManager, create_access_token, jwt_required, get_jwt_identity

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db'
db = SQLAlchemy(app)

# Session security configurations
app.secret_key = 'a3f5e6d7c8b9a0b1c2d3e4f5a6b7c8d9e0f1a2b3c4d5e6f7a8b9c0d1e2f3a4b5'  # Ensure it's a strong key
app.config['SESSION_COOKIE_SECURE'] = True  # Enable only in production with HTTPS
app.config['SESSION_COOKIE_HTTPONLY'] = True  # Prevent access by JavaScript
app.config['SESSION_COOKIE_SAMESITE'] = 'Lax'  # CSRF protection
app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(minutes=30)  # Session timeout

# Models
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(100), unique=True, nullable=False)
    password = db.Column(db.String(100), nullable=False)

    def __init__(self, name, email, password):
        self.name = name
        self.email = email
        self.password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')

    def check_password(self, password):
        return bcrypt.checkpw(password.encode('utf-8'), self.password.encode('utf-8'))


class Admin(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(100), unique=True, nullable=False)
    password = db.Column(db.String(100), nullable=False)


# Create tables in the database
with app.app_context():
    db.create_all()
    
    # Ensure there's an admin account by default
    if not Admin.query.filter_by(email='admin@admin').first():
        admin = Admin(email='admin@admin', password=bcrypt.hashpw('admin'.encode('utf-8'), bcrypt.gensalt()).decode('utf-8'))
        db.session.add(admin)
        db.session.commit()

# Routes

@app.route('/')
def login():
    return render_template('login.html')


@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        name = request.form['name']
        email = request.form['email']
        password = request.form['password']

        # Validate email
        try:
            valid = validate_email(email)
            email = valid.email  # Normalized email
        except EmailNotValidError as e:
            return render_template('register.html', error=f"Email tidak valid: {str(e)}!")

        # Check if the email already exists
        if User.query.filter_by(email=email).first():
            return render_template('register.html', error="Email sudah terdaftar!")

        # Create new user
        new_user = User(name=name, email=email, password=password)
        db.session.add(new_user)
        db.session.commit()
        
        # Redirect to login with success message
        session['success'] = "Registrasi berhasil, silahkan login!"
        return redirect('/')

    return render_template('register.html')


@app.route('/login', methods=['POST'])
def do_login():
    email = request.form['email']
    password = request.form['password']

    # Admin check
    admin = Admin.query.filter_by(email=email).first()
    if admin and bcrypt.checkpw(password.encode('utf-8'), admin.password.encode('utf-8')):
        session['admin_email'] = admin.email
        session.permanent = True  # Keep session alive based on config
        return redirect('/dashboard_admin')

    # User check
    user = User.query.filter_by(email=email).first()
    if user and user.check_password(password):
        session['email'] = user.email
        session.permanent = True  # Keep session alive based on config
        return redirect('/dashboard_users')

    return render_template('login.html', error='Kredensial tidak valid')


@app.route('/dashboard_admin')
def admin_dashboard():
    if 'admin_email' not in session:
        abort(403)  # Forbidden access if not logged in as admin
    return redirect('http://localhost:8501/')  # Streamlit admin dashboard URL


@app.route('/dashboard_users')
def user_dashboard():
    if 'email' not in session:
        abort(403)  # Forbidden access if not logged in as user
    return redirect('http://localhost:8502/')  # Streamlit user dashboard URL


@app.route('/logout')
def logout():
    session.pop('email', None)
    return redirect('/')


@app.route('/admin_logout')
def admin_logout():
    session.pop('admin_email', None)
    return redirect('/')


@app.route('/get_users', methods=['GET'])
def get_users():
    if 'admin_email' not in session:
        return jsonify({'message': 'Unauthorized access'}), 403
    
    users = User.query.all()
    users_data = [{'id': user.id, 'name': user.name, 'email': user.email} for user in users]
    return jsonify(users_data), 200


@app.route('/delete_user/<int:user_id>', methods=['DELETE'])
def delete_user(user_id):
    if 'admin_email' not in session:
        return jsonify({'message': 'Unauthorized access'}), 403

    user = User.query.get(user_id)
    if user:
        db.session.delete(user)
        db.session.commit()
        return jsonify({'message': 'User deleted successfully'}), 200
    else:
        return jsonify({'message': 'User not found'}), 404

if __name__ == '__main__':
    app.run(debug=True)
